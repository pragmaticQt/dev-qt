#ifndef REP_QIVIPAGINGMODEL_SOURCE_H
#define REP_QIVIPAGINGMODEL_SOURCE_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectsource.h>

#include <QtIviCore/QtIviCoreModule>

#include <QUuid>

class QIviPagingModelSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "QIviPagingModel")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "6deef7129923f33f59e10b0b0ceb0a417f87c31a")

public:
    explicit QIviPagingModelSource(QObject *parent = nullptr) : QObject(parent)
    {
        qRegisterMetaType<QtIviCoreModule::ModelCapabilities>();
        qRegisterMetaTypeStreamOperators<QtIviCoreModule::ModelCapabilities>();

    }

public:
    ~QIviPagingModelSource() override = default;


Q_SIGNALS:
    void supportedCapabilitiesChanged(const QUuid & identifier, QtIviCoreModule::ModelCapabilities capabilities);
    void countChanged(const QUuid & identifier, int newLength);
    void dataFetched(const QUuid & identifier, const QList<QVariant> & data, int start, bool moreAvailable);
    void dataChanged(const QUuid & identifier, const QList<QVariant> & data, int start, int count);

public Q_SLOTS:
    virtual void registerInstance(const QUuid & identifier) = 0;
    virtual void unregisterInstance(const QUuid & identifier) = 0;
    virtual void fetchData(const QUuid & identifier, int start, int count) = 0;

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};


class QIviPagingModelSimpleSource : public QIviPagingModelSource
{
    Q_OBJECT

public:
    explicit QIviPagingModelSimpleSource(QObject *parent = nullptr) : QIviPagingModelSource(parent)
    {
    }

public:
    ~QIviPagingModelSimpleSource() override = default;


private:
};


template <class ObjectType>
struct QIviPagingModelSourceAPI : public SourceApiMap
{
    QIviPagingModelSourceAPI(ObjectType *object, const QString &name = QLatin1String("QIviPagingModel"))
        : SourceApiMap(), m_name(name)
    {
        Q_UNUSED(object);
        m_enums[0] = 0;
        m_properties[0] = 0;
        m_signals[0] = 4;
        m_signals[1] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::supportedCapabilitiesChanged, static_cast<void (QObject::*)(QUuid,QtIviCoreModule::ModelCapabilities)>(0),m_signalArgCount+0,&m_signalArgTypes[0]);
        m_signals[2] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::countChanged, static_cast<void (QObject::*)(QUuid,int)>(0),m_signalArgCount+1,&m_signalArgTypes[1]);
        m_signals[3] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::dataFetched, static_cast<void (QObject::*)(QUuid,QList<QVariant>,int,bool)>(0),m_signalArgCount+2,&m_signalArgTypes[2]);
        m_signals[4] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::dataChanged, static_cast<void (QObject::*)(QUuid,QList<QVariant>,int,int)>(0),m_signalArgCount+3,&m_signalArgTypes[3]);
        m_methods[0] = 3;
        m_methods[1] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::registerInstance, static_cast<void (QObject::*)(QUuid)>(0),"registerInstance(QUuid)",m_methodArgCount+0,&m_methodArgTypes[0]);
        m_methods[2] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::unregisterInstance, static_cast<void (QObject::*)(QUuid)>(0),"unregisterInstance(QUuid)",m_methodArgCount+1,&m_methodArgTypes[1]);
        m_methods[3] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::fetchData, static_cast<void (QObject::*)(QUuid,int,int)>(0),"fetchData(QUuid,int,int)",m_methodArgCount+2,&m_methodArgTypes[2]);
    }

    QString name() const override { return m_name; }
    QString typeName() const override { return QStringLiteral("QIviPagingModel"); }
    int enumCount() const override { return m_enums[0]; }
    int propertyCount() const override { return m_properties[0]; }
    int signalCount() const override { return m_signals[0]; }
    int methodCount() const override { return m_methods[0]; }
    int sourceEnumIndex(int index) const override
    {
        if (index < 0 || index >= m_enums[0])
            return -1;
        return m_enums[index+1];
    }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= m_properties[0])
            return -1;
        return m_properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= m_signals[0] || paramIndex < 0 || paramIndex >= m_signalArgCount[sigIndex])
            return -1;
        return m_signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methodArgCount[index];
    }
    int methodParameterType(int methodIndex, int paramIndex) const override
    {
        if (methodIndex < 0 || methodIndex >= m_methods[0] || paramIndex < 0 || paramIndex >= m_methodArgCount[methodIndex])
            return -1;
        return m_methodArgTypes[methodIndex][paramIndex];
    }
    int propertyIndexFromSignal(int index) const override
    {
        Q_UNUSED(index);
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        Q_UNUSED(index);
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("supportedCapabilitiesChanged(QUuid,QtIviCoreModule::ModelCapabilities)");
        case 1: return QByteArrayLiteral("countChanged(QUuid,int)");
        case 2: return QByteArrayLiteral("dataFetched(QUuid,QList<QVariant>,int,bool)");
        case 3: return QByteArrayLiteral("dataChanged(QUuid,QList<QVariant>,int,int)");
        }
        return QByteArrayLiteral("");
    }
    QList<QByteArray> signalParameterNames(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_signals[index + 1]).parameterNames();
    }
    const QByteArray methodSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("registerInstance(QUuid)");
        case 1: return QByteArrayLiteral("unregisterInstance(QUuid)");
        case 2: return QByteArrayLiteral("fetchData(QUuid,int,int)");
        }
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    QList<QByteArray> methodParameterNames(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_methods[index + 1]).parameterNames();
    }
    const QByteArray typeName(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("void");
        case 1: return QByteArrayLiteral("void");
        case 2: return QByteArrayLiteral("void");
        }
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"6deef7129923f33f59e10b0b0ceb0a417f87c31a"}; }

    int m_enums[1];
    int m_properties[1];
    int m_signals[5];
    int m_methods[4];
    const QString m_name;
    int m_signalArgCount[4];
    const int* m_signalArgTypes[4];
    int m_methodArgCount[3];
    const int* m_methodArgTypes[3];
};

QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_QIVIPAGINGMODEL_SOURCE_H
